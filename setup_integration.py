#!/usr/bin/env python3
"""
Script de configura√ß√£o da integra√ß√£o entre interface e simulador.

Este script configura o ambiente necess√°rio para a integra√ß√£o,
criando diret√≥rios, inicializando o banco de dados e verificando depend√™ncias.
"""
import os
import sys
import subprocess
from pathlib import Path
import sqlite3

def create_directories():
    """Cria os diret√≥rios necess√°rios para a integra√ß√£o."""
    directories = [
        "uploads/algoritmo_genetico",
        "uploads/nsga_ii", 
        "uploads/forca_bruta",
        "simulador_heuristica/input",
        "simulador_heuristica/output",
        "temp_simulation",
        "temp_nsga",
        "mapas"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úì Diret√≥rio criado: {directory}")

def initialize_database():
    """Inicializa o banco de dados SQLite."""
    try:
        # Executa o script de cria√ß√£o do banco
        db_script = Path("database/db.py")
        if db_script.exists():
            subprocess.run([sys.executable, str(db_script)], check=True)
            print("‚úì Banco de dados inicializado")
        else:
            print("‚ö†Ô∏è Script de banco de dados n√£o encontrado")
    except subprocess.CalledProcessError as e:
        print(f"‚úó Erro ao inicializar banco de dados: {e}")

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas."""
    required_packages = [
        "streamlit",
        "numpy",
        "pandas",
        "PIL"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úì {package} instalado")
        except ImportError:
            missing_packages.append(package)
            print(f"‚úó {package} n√£o encontrado")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Pacotes faltando: {', '.join(missing_packages)}")
        print("Execute: pip install " + " ".join(missing_packages))
        return False
    
    return True

def check_simulator_structure():
    """Verifica se a estrutura do simulador est√° correta."""
    required_files = [
        "simulador_heuristica/simulator/main.py",
        "simulador_heuristica/simulator/simulator.py",
        "simulador_heuristica/unified/mh_ga_nsgaii.py",
        "modulo_criacao_mapas/map_converter_utils.py",
        "modulo_criacao_mapas/map_converter.py"
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úì {file_path} encontrado")
        else:
            missing_files.append(file_path)
            print(f"‚úó {file_path} n√£o encontrado")
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Arquivos do simulador faltando: {missing_files}")
        return False
    
    return True

def create_example_configs():
    """Cria arquivos de configura√ß√£o de exemplo."""
    
    # Configura√ß√£o de exemplo para NSGA-II
    nsga_config = {
        "population_size": 20,
        "generations": 10,
        "crossover_rate": 0.8,
        "mutation_rate": 0.1,
        "description": "Configura√ß√£o de exemplo para NSGA-II"
    }
    
    config_file = Path("uploads/nsga_ii/example_config.json")
    config_file.parent.mkdir(parents=True, exist_ok=True)
    
    import json
    with open(config_file, 'w') as f:
        json.dump(nsga_config, f, indent=2)
    
    print(f"‚úì Arquivo de configura√ß√£o de exemplo criado: {config_file}")

def main():
    """Fun√ß√£o principal de configura√ß√£o."""
    print("üöÄ Configurando integra√ß√£o entre interface e simulador...\n")
    
    # Cria diret√≥rios
    print("üìÅ Criando diret√≥rios...")
    create_directories()
    print()
    
    # Inicializa banco de dados
    print("üóÑÔ∏è Inicializando banco de dados...")
    initialize_database()
    print()
    
    # Verifica depend√™ncias
    print("üì¶ Verificando depend√™ncias...")
    deps_ok = check_dependencies()
    print()
    
    # Verifica estrutura do simulador
    print("üîç Verificando estrutura do simulador...")
    simulator_ok = check_simulator_structure()
    print()
    
    # Cria configura√ß√µes de exemplo
    print("üìù Criando configura√ß√µes de exemplo...")
    create_example_configs()
    print()
    
    # Resumo
    print("=" * 50)
    print("üìã RESUMO DA CONFIGURA√á√ÉO")
    print("=" * 50)
    
    if deps_ok and simulator_ok:
        print("‚úÖ Integra√ß√£o configurada com sucesso!")
        print("\nPara executar a interface:")
        print("  streamlit run interface/App.py")
        print("\nPara executar o simulador diretamente:")
        print("  python -m simulador_heuristica.simulator.main -e cult_experiment")
    else:
        print("‚ö†Ô∏è Configura√ß√£o incompleta. Verifique os erros acima.")
        if not deps_ok:
            print("  - Instale as depend√™ncias faltantes")
        if not simulator_ok:
            print("  - Verifique se todos os arquivos do simulador est√£o presentes")
    
    print("\nüìö Documenta√ß√£o dispon√≠vel em: docs/integration/")

if __name__ == "__main__":
    main()
